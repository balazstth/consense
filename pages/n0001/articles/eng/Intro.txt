
<p></p>

<p>
    <b>2018-09-22: ConSense is being revived. That means linting and sorting out obvious problems. Using what still can be used. Having a look at what is still working ten years after! I was a very young man when I started working on ConSense - a brat, - let's see how it fares today. A fun project.</br>
    </br>
    Press Alt-Shift-K any time to reveal or hide the ConSense console.</br>
    </br>
    The software package may be downloaded from <span style="text-decoration: underline;">(GitHub)https://github.com/balazstth/consense</span>.</b>
</p>

<hr /><br />

<p>
    <b>The original article from 2008</b>
</p>

<p>
    *Motto* <br>
    <br>
    *Make sense with simplicity.* Create something that is outstanding. A bit too much to wish for? I sincerely do not think so.<br>
</p>

<p>
    *Outline* <br>
    <br>
    ConSense, RedSand and SimpleClasses exist to ease your life as a web engineer. Performing heavy-duty tasks with them is a snap. No matter if your job is to build a "web 2.0" site or make the transition of your code developed in Firefox to IE, each of them takes only a few minutes. If you are in a hurry you may as well just skip down to the <a href="#teaser">Teaser</a>.<br>
    <br>
    *RedSand and SimpleClasses* form a sound, dynamic, object oriented, ever growing JavaScript/DHTML framework covering all aspects of client-side web development.<br>
    <br>
    *RedSand/GL* stands for RedSand Graphics Library and forms a set of vector graphics tools implemented in pure JavaScript and DHTML.<br>
    <br>
    *ConSense* itself is a sophisticated "jack of all trades" console, capable and versatile. It gives you insight into anything in connection with your web application on the client-side, right to the smallest detail. With its help finding browser incompatibilities, tracking down style element inheritance errors, all-encompassing DOM inspection and mapping, detailed debugging and logging, on-the-fly file loading or asynchronous communication with web services become less than routine.<br>
    <br>
    On top of all that ConSense needs only a single-line footprint in your markup code. Friends? By all means.<br>
</p>

<p>
    <a name="teaser"></a>
    *Teaser* <br>
    <br>
    In fact ConSense is already running in this page. Why don't you click the button below and play around with it? Said Wow!? I can understand that. Notice that it can be dragged around and be shown/hidden with its header controls. As a demonstration simply click and run a few of the one-liner examples found later in this paragraph, hopefully you will have fun doing so. Some functions may take their time collecting all the information you need but patience is always its own reward :)<br>
    <br>
    <a class="toggleButton" href="javascript:
        conSense.showConsole(conSense.show);
        conSense.globalShowConsole(conSense.toggle);
        window.scrollTo(0, 0);
        ">Push me to toggle global console visibility</a><br>
    <br>
    <a href="javascript:injectCommand(0)">help()</a><br>
    <br>
    // DOM mapping<br>
    <a href="javascript:injectCommand(1)">map(document)</a><br>
    <br>
    // Click any reference from the previous mapping (highlighted DOM id or<br>
    // temporarily generated (o) reference) than complete the command line with an<br>
    // inspect() or list() call. Or you may as well solely click the example below.<br>
    <a href="javascript:injectCommand(2)">list("contentContainer")</a><br>
    <br>
    // List all style properties of an element<br>
    <a href="javascript:injectCommand(3)">listStyle("contentContainer")</a><br>
    <br>
    // Dynamic style mapping<br>
    <a href="javascript:injectCommand(4)">mapCSS("conSenseOut")</a><br>
    <br>
    // Full static CSS listing<br>
    <a href="javascript:injectCommand(5)">listCSS()</a><br>
    <br>
    // Single element outlining. Can also be combined with temporary (o) element<br>
    // references generated by last mapping.<br>
    <a href="javascript:injectCommand(6)">outline("wrapper2")</a><br>
    <br>
    // Subtree outlining<br>
    <a href="javascript:injectCommand(7)">outlineSub("conSenseOut")</a><br>
    <br>
    // Element outlining by type<br>
    <a href="javascript:injectCommand(8)">outlineAll("p")</a><br>
    <br>
    // Loads and runs external JavaScript file fox.txt<br>
    <a href="javascript:injectCommand(9)">load("fox.txt")</a><br>
    <br>
    // Loads fox.txt as a text file and alerts its contents via a custom callback<br>
    // routine<br>
    <a href="javascript:injectCommand(10)">var callback = new Function("content", "alert(content)"); load("fox.txt", callback);</a><br>
    <br>
    // SimpleCryptography demo<br>
    <a href="javascript:injectCommand(11)">write(simpleCrypto.base64Decode(simpleCrypto.RC4Decrypt("weakpassitsme", simpleCrypto.RC4Encrypt("weakpassitsme", simpleCrypto.base64Encode("Very secret message (or timestamped password to be sent to the server or whatever).")))))</a><br>
</p>

<p>
    *RedSand: the backbone of your page* <br>
    <br>
    To understand how easily RedSand builds up your web document, have a look at <a href="pageN0001/js/blueprint.js">pageN0001/js/blueprint.js</a>. Those few lines hold all the secrets to be told. The blueprint is loaded by index.html in runtime with one single call. Notice that all references in blueprint.js could be changed to any URI, hence making your otherwise static page fully dynamic and able to utilize any database backend, web service, etc.<br>
    <br>
    Under server/php/ you can find a reference server-side database layer implementation which accepts a query definition as parameter and returns either JS source code, CSV or document output as a result. Combined with load() all database backend tasks up to medium complexity can be very easily handled with that. More robust Java, .Net, PHP, Python, Perl, Ruby implementations can also be realized in relatively short time.<br>
</p>
